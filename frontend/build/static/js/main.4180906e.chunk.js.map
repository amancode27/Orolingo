{"version":3,"sources":["components/Modal.js","App.js","serviceWorker.js","index.js"],"names":["CustomModal","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","_e$target","target","name","value","type","checked","activeItem","objectSpread","state","defineProperty","setState","_this2","_this$props","toggle","onSave","react_default","a","createElement","reactstrap_es","isOpen","for","title","onChange","placeholder","description","check","completed","color","onClick","Component","App","refreshList","axios","get","then","res","todoList","data","catch","err","console","log","displayCompleted","status","viewCompleted","renderTabList","className","renderItems","filter","item","map","key","id","concat","editItem","handleDelete","modal","handleSubmit","put","post","delete","createItem","Modal_CustomModal","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4180906e.chunk.js","sourcesContent":["// frontend/src/components/Modal.js\r\n\r\nimport React, { Component } from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Label\r\n} from \"reactstrap\";\r\n\r\nexport default class CustomModal extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      activeItem: this.props.activeItem\r\n    };\r\n  }\r\n\r\n  handleChange = e => {\r\n    let { name, value } = e.target;\r\n    if (e.target.type === \"checkbox\") {\r\n      value = e.target.checked;\r\n    }\r\n    const activeItem = { ...this.state.activeItem, [name]: value };\r\n    this.setState({ activeItem });\r\n  };\r\n\r\n  render() {\r\n    const { toggle, onSave } = this.props;\r\n    return (\r\n      <Modal isOpen={true} toggle={toggle}>\r\n        <ModalHeader toggle={toggle}> Todo Item </ModalHeader>\r\n        <ModalBody>\r\n          <Form>\r\n            <FormGroup>\r\n              <Label for=\"title\">Title</Label>\r\n              <Input\r\n                type=\"text\"\r\n                name=\"title\"\r\n                value={this.state.activeItem.title}\r\n                onChange={this.handleChange}\r\n                placeholder=\"Enter Todo Title\"\r\n              />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"description\">Description</Label>\r\n              <Input\r\n                type=\"text\"\r\n                name=\"description\"\r\n                value={this.state.activeItem.description}\r\n                onChange={this.handleChange}\r\n                placeholder=\"Enter Todo description\"\r\n              />\r\n            </FormGroup>\r\n            <FormGroup check>\r\n              <Label for=\"completed\">\r\n                <Input\r\n                  type=\"checkbox\"\r\n                  name=\"completed\"\r\n                  checked={this.state.activeItem.completed}\r\n                  onChange={this.handleChange}\r\n                />\r\n                Completed\r\n              </Label>\r\n            </FormGroup>\r\n          </Form>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"success\" onClick={() => onSave(this.state.activeItem)}>\r\n            Save\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n","// frontend/src/App.js\r\n\r\nimport React, { Component } from \"react\";\r\nimport Modal from \"./components/Modal\";\r\nimport axios from \"axios\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      viewCompleted: false,\r\n      activeItem: {\r\n        title: \"\",\r\n        description: \"\",\r\n        completed: false\r\n      },\r\n      todoList: []\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.refreshList();\r\n  }\r\n  refreshList = () => {\r\n    axios\r\n      .get(\"http://localhost:8000/api/todos/\")\r\n      .then(res => this.setState({ todoList: res.data }))\r\n      .catch(err => console.log(err));\r\n  };\r\n  displayCompleted = status => {\r\n    if (status) {\r\n      return this.setState({ viewCompleted: true });\r\n    }\r\n    return this.setState({ viewCompleted: false });\r\n  };\r\n  renderTabList = () => {\r\n    return (\r\n      <div className=\"my-5 tab-list\">\r\n        <span\r\n          onClick={() => this.displayCompleted(true)}\r\n          className={this.state.viewCompleted ? \"active\" : \"\"}\r\n        >\r\n          complete\r\n        </span>\r\n        <span\r\n          onClick={() => this.displayCompleted(false)}\r\n          className={this.state.viewCompleted ? \"\" : \"active\"}\r\n        >\r\n          Incomplete\r\n        </span>\r\n      </div>\r\n    );\r\n  };\r\n  renderItems = () => {\r\n    const { viewCompleted } = this.state;\r\n    const newItems = this.state.todoList.filter(\r\n      item => item.completed === viewCompleted\r\n    );\r\n    return newItems.map(item => (\r\n      <li\r\n        key={item.id}\r\n        className=\"list-group-item d-flex justify-content-between align-items-center\"\r\n      >\r\n        <span\r\n          className={`todo-title mr-2 ${\r\n            this.state.viewCompleted ? \"completed-todo\" : \"\"\r\n          }`}\r\n          title={item.description}\r\n        >\r\n          {item.title}\r\n        </span>\r\n        <span>\r\n          <button\r\n            onClick={() => this.editItem(item)}\r\n            className=\"btn btn-secondary mr-2\"\r\n          >\r\n            {\" \"}\r\n            Edit{\" \"}\r\n          </button>\r\n          <button\r\n            onClick={() => this.handleDelete(item)}\r\n            className=\"btn btn-danger\"\r\n          >\r\n            Delete{\" \"}\r\n          </button>\r\n        </span>\r\n      </li>\r\n    ));\r\n  };\r\n  toggle = () => {\r\n    this.setState({ modal: !this.state.modal });\r\n  };\r\n  handleSubmit = item => {\r\n    this.toggle();\r\n    if (item.id) {\r\n      axios\r\n        .put(`http://localhost:8000/api/todos/${item.id}/`, item)\r\n        .then(res => this.refreshList());\r\n      return;\r\n    }\r\n    axios\r\n      .post(\"http://localhost:8000/api/todos/\", item)\r\n      .then(res => this.refreshList());\r\n  };\r\n  handleDelete = item => {\r\n    axios\r\n      .delete(`http://localhost:8000/api/todos/${item.id}`)\r\n      .then(res => this.refreshList());\r\n  };\r\n  createItem = () => {\r\n    const item = { title: \"\", description: \"\", completed: false };\r\n    this.setState({ activeItem: item, modal: !this.state.modal });\r\n  };\r\n  editItem = item => {\r\n    this.setState({ activeItem: item, modal: !this.state.modal });\r\n  };\r\n  render() {\r\n    return (\r\n      <main className=\"content\">\r\n        <h1 className=\"text-white text-uppercase text-center my-4\">Todo app</h1>\r\n        <div className=\"row \">\r\n          <div className=\"col-md-6 col-sm-10 mx-auto p-0\">\r\n            <div className=\"card p-3\">\r\n              <div className=\"\">\r\n                <button onClick={this.createItem} className=\"btn btn-primary\">\r\n                  Add task\r\n                </button>\r\n              </div>\r\n              {this.renderTabList()}\r\n              <ul className=\"list-group list-group-flush\">\r\n                {this.renderItems()}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {this.state.modal ? (\r\n          <Modal\r\n            activeItem={this.state.activeItem}\r\n            toggle={this.toggle}\r\n            onSave={this.handleSubmit}\r\n          />\r\n        ) : null}\r\n      </main>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","\r\n  // frontend/src/index.js\r\n  \r\n  import React from 'react';\r\n  import ReactDOM from 'react-dom';\r\n  import 'bootstrap/dist/css/bootstrap.min.css';       // add this\r\n  import './index.css';\r\n  import App from './App';\r\n  import * as serviceWorker from './serviceWorker';\r\n  \r\n  ReactDOM.render(<App />, document.getElementById('root'));\r\n  // If you want your app to work offline and load faster, you can change\r\n  // unregister() to register() below. Note this comes with some pitfalls.\r\n  // Learn more about service workers: http://bit.ly/CRA-PWA\r\n  serviceWorker.unregister();"],"sourceRoot":""}